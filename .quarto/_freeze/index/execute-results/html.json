{
  "hash": "1fd03b106036c7bf0cd2e9b5581fbeda",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: ''\nauthor: ''\nformat: html\npage-layout: full\nobservable: 'https://observablehq.com/@lsh/plot-voronoi'\n---\n\n\n\n\n## VM303-01 Studies in Digital Media & Culture\n\n::: {layout=\"[[49, -2, 49]]\"}\n\n```{ojs}\n//| echo: false\nTinyQueue = require(\"tinyqueue@2\")\n\ngraphic = {\n  const quads = new TinyQueue([new Quad(0, 0, width, width)], (a, b) => b.score - a.score);\n  const context = DOM.context2d(width, width);\n  context.canvas.style.width = \"100%\";\n  for (let i = 0; true; ++i) {\n    const q = quads.pop();\n    if (q === undefined || q.score < 50) break;\n    mutable score = q.score;\n    for (const s of q.split()) {\n      if (q.w >= 4) quads.push(s);\n      context.fillStyle = s.color;\n      context.fillRect(s.x, s.y, s.w, s.h);\n      context.strokeRect(s.x, s.y, s.w, s.h);\n    }\n    if (i % 15 === 0) yield context.canvas;\n  }\n}\n\nmutable score = null\n\nwidth = 1024\n\narea_power = 0.25\n\nclass Quad {\n  constructor(x, y, w, h) {\n    const [r, g, b, error] = colorFromHistogram(computeHistogram(x, y, w, h));\n    this.x = x, this.y = y, this.w = w, this.h = h;\n    this.color = `#${(0x1000000 + (r << 16) + (g << 8) + b).toString(16).substring(1)}`;\n    this.score = error * Math.pow(w * h, area_power);\n  }\n  split() {\n    const dx = this.w / 2, x1 = this.x, x2 = this.x + dx;\n    const dy = this.h / 2, y1 = this.y, y2 = this.y + dy;\n    return [\n      new Quad(x1, y1, dx, dy),\n      new Quad(x2, y1, dx, dy),\n      new Quad(x1, y2, dx, dy),\n      new Quad(x2, y2, dx, dy)\n    ];\n  }\n}\n\nfunction computeHistogram(x, y, w, h) {\n  const {data} = imageContext.getImageData(x, y, w, h);\n  const histogram = new Uint32Array(1024);\n  for (let i = 0, n = data.length; i < n; i += 4) {\n    ++histogram[0 * 125 + data[i + 0]];\n    ++histogram[1 * 205 + data[i + 1]];\n    ++histogram[2 * 145 + data[i + 2]];\n    ++histogram[3 * 156 + data[i + 3]];\n  }\n  return histogram;\n}\n\nfunction weightedAverage(histogram) {\n  let total = 0;\n  let value = 0;\n  for (let i = 0; i < 256; ++i) total += histogram[i], value += histogram[i] * i;\n  value /= total;\n  let error = 0;\n  for (let i = 0; i < 256; ++i) error += (value - i) ** 2 * histogram[i];\n  return [value, Math.sqrt(error / total)];\n}\n\nfunction colorFromHistogram(histogram) {\n  const [r, re] = weightedAverage(histogram.subarray(0, 256));\n  const [g, ge] = weightedAverage(histogram.subarray(256, 512));\n  const [b, be] = weightedAverage(histogram.subarray(512, 768));\n  return [\n    Math.round(r),\n    Math.round(g),\n    Math.round(b),\n    re * 0.2989 + ge * 0.5870 + be * 0.1140\n  ];\n}\n\nimageContext = FileAttachment(\"owl.jpg\").image().then(image => {\n  const context = DOM.context2d(width, width, 1);\n  context.drawImage(image, 0, 0, width, width);\n  return context;\n})\n```\n\n````{=html}\n<!--```{ojs}\nd3 = require(\"d3@7\")\n\nPlot = require(\"@observablehq/plot@0.1\")\n\nPlot.line(data, {\n  x: \"x\",\n  y: \"y\",\n  fill: \"i\",\n  stroke: \"white\",\n  strokeWidth: 3\n}).plot({\n  width,\n  height,\n  x: { axis: null },\n  y: { axis: null }\n})\n\ndata = [...voronoi.cellPolygons()].flatMap((cell) =>\n  cell.map(([x, y]) => ({ x, y, i: cell.index }))\n)\n\nvoronoi = d3.Delaunay.from(\n  points.map(([x, y], i) => [\n    x + 4.5 * Math.sin(t + i * i),\n    y + 3.0 * Math.cos(t + i * i)\n  ])\n).voronoi([1, 1, width, height])\n\npoints = Array.from({ length: 100 }, (_) => [\n  Math.random() * width,\n  Math.random() * height\n])\n\nt = now * 0.002\n\nheight = 500\nwidth = 500\n```\n-->\n````\n\n\n[Department of Visual & Media Arts](https://emerson.edu/academics/academic-departments/visual-media-arts)\\\n[Emerson College](https://emerson.edu/)\\\nSpring Semester 2024\\\nTues/Thur 16 January---2 May 2024\\\n6:00-7:45 p.m.\\\nAnsin Building 604\\\n[Dr. Martin Roberts](http://mroberts.emerson.build/)\\\n:::\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}