{
  "hash": "cd0be6f46a37ab751c20ac4eb26d2659",
  "result": {
    "markdown": "---\ntitle: ''\nformat: html\necho: false\nobservable: 'https://observablehq.com/@mbostock/webgl-sobel'\n---\n\n\n\n```{ojs}\nviewof gl = {\n  const canvas = DOM.canvas(width, height);\n  canvas.value = canvas.getContext(\"webgl\");\n  return canvas;\n}\n```\n\n```{ojs}\ndraw = {\n  gl.useProgram(program);\n  gl.enableVertexAttribArray(a_vertex);\n  gl.vertexAttribPointer(a_vertex, 2, gl.FLOAT, false, 0, 0);\n  gl.uniform1f(u_size, Math.max(viewof gl.width, viewof gl.height));\n  while (true) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n    yield;\n  }\n}\n```\n\n```{ojs}\nfragmentShader = {\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(shader, `\nprecision highp float;\n\nuniform sampler2D u_image;\nuniform float u_size;\n\nvoid main() {\n  float x = gl_FragCoord.x / u_size;\n  float y = 1.0 - gl_FragCoord.y / u_size;\n  float px = 1.0 / u_size;\n  vec3 a0 = texture2D(u_image, vec2(x - px, y + px)).xyz;\n  vec3 a1 = texture2D(u_image, vec2(x, y + px)).xyz;\n  vec3 a2 = texture2D(u_image, vec2(x + px, y + px)).xyz;\n  vec3 a3 = texture2D(u_image, vec2(x - px, y)).xyz;\n  vec3 a5 = texture2D(u_image, vec2(x + px, y)).xyz;\n  vec3 a6 = texture2D(u_image, vec2(x - px, y - px)).xyz;\n  vec3 a7 = texture2D(u_image, vec2(x, y - px)).xyz;\n  vec3 a8 = texture2D(u_image, vec2(x + px, y - px)).xyz;\n  vec3 gx = -a0 + a2 - 2.0 * a3 + 2.0 * a5 - a6 + a8;\n  vec3 gy = -a0 - 2.0 * a1 - a2 + a6 + 2.0 * a7 + a8;\n  gl_FragColor = vec4(sqrt(gx * gx + gy * gy), 1.0);\n}\n`);\n  gl.compileShader(shader);\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) return shader;\n  throw new Error(gl.getShaderInfoLog(shader));\n}\n```\n\n```{ojs}\nvertexShader = {\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, `\nattribute vec2 a_vertex;\n\nvoid main(void) {\n  gl_Position = vec4(a_vertex, 0.0, 1.0);\n}\n`);\n  gl.compileShader(shader);\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) return shader;\n  throw new Error(gl.getShaderInfoLog(shader));\n}\n```\n\n```{ojs}\nvertexBuffer = {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, Float32Array.of(-1, -1, +1, -1, +1, +1, -1, +1), gl.STATIC_DRAW);\n  return buffer;\n}\n```\n\n```{ojs}\nvideo = {\n  const video = document.createElement(\"div\").appendChild(html`<video autoplay playsinline>`);\n  const stream = await navigator.mediaDevices.getUserMedia({\n    video: {width: {ideal: size}, height: {ideal: size}}, \n    audio: false\n  });\n  yield video;\n  video.srcObject = stream;\n  video.play();\n  invalidation.then(() => stream.getTracks().forEach(t => t.stop()));\n}\n```\n\n```{ojs}\ntexture = {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  return texture;\n}\n```\n\n```{ojs}\nprogram = {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  if (gl.getProgramParameter(program, gl.LINK_STATUS)) return program;\n  throw new Error(gl.getProgramInfoLog(program));\n}\n```\n\n```{ojs}\nu_size = gl.getUniformLocation(program, \"u_size\")\n```\n\n```{ojs}\na_vertex = gl.getAttribLocation(program, \"a_vertex\")\n```\n\n```{ojs}\nsize = 512\n```\n\n```{ojs}\nheight = width\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}